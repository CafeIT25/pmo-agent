export interface ChatMessage {
  id: string;
  thread_id: string;
  role: 'user' | 'assistant';
  content: string;
  created_at: string;
  token_count?: number;
  model_id?: string;
  cost?: number;
}

export interface ChatThread {
  id: string;
  user_id: string;
  task_id: string;
  title: string;
  created_at: string;
  updated_at: string;
  messages: ChatMessage[];
}

export const mockChatThreads: ChatThread[] = [
  {
    id: 'thread-1',
    user_id: 'user-1',
    task_id: 'f47ac10b-58cc-4372-a567-0e02b2c3d479',
    title: 'プロジェクト計画書作成 - AI相談',
    created_at: '2024-08-14T09:00:00Z',
    updated_at: '2024-08-14T15:30:00Z',
    messages: [
      {
        id: 'msg-1',
        thread_id: 'thread-1',
        role: 'user',
        content: 'Q1の新規プロジェクト計画書を作成するにあたって、どのような構成要素を含めるべきか教えてください。効果的な計画書の作り方についてアドバイスをお願いします。',
        created_at: '2024-08-14T09:00:00Z',
        token_count: 56,
        model_id: 'gpt-4'
      },
      {
        id: 'msg-2',
        thread_id: 'thread-1',
        role: 'assistant',
        content: `## 効果的なプロジェクト計画書の構成要素

### 📋 必須セクション

**1. エグゼクティブサマリー**
- プロジェクトの概要と目標
- 期待される成果と投資対効果
- 主要なマイルストーンとタイムライン

**2. プロジェクト概要**
- 背景と課題設定
- 目的と成功指標（KPI）
- スコープと制約条件

**3. 実行計画**
- 作業分解構造（WBS）
- スケジュールとマイルストーン
- リソース配分計画

**4. リスク管理**
- リスク識別と評価
- 緩和策と対応計画
- ステークホルダー分析

### ✅ 作成のポイント
- **具体的で測定可能**な目標設定
- **現実的なタイムライン**の策定
- **定期的な進捗レビュー**の仕組み

次に具体的にどの部分について詳しく知りたいですか？`,
        created_at: '2024-08-14T09:02:00Z',
        token_count: 195,
        model_id: 'gpt-4',
        cost: 0.009
      },
      {
        id: 'msg-3',
        thread_id: 'thread-1',
        role: 'user',
        content: 'リスク管理の部分について詳しく教えてください。特に、Q1プロジェクトで考慮すべきリスク要因と効果的な緩和策について具体例をお願いします。',
        created_at: '2024-08-14T15:25:00Z',
        token_count: 58
      },
      {
        id: 'msg-4',
        thread_id: 'thread-1',
        role: 'assistant',
        content: `## Q1プロジェクト リスク管理 詳細ガイド

### 🔴 主要リスク要因

**1. スケジュールリスク**
- 年末年始・祝日による稼働日数減少
- 新年度準備による他部署リソース制約
- 予算承認プロセスの遅延

**2. リソースリスク**
- 経験豊富なメンバーの離職・異動
- 新規採用の遅れ
- スキル不足による生産性低下

**3. 技術リスク**
- 新技術導入による予期しない問題
- 外部ベンダーの対応遅延
- システム統合時の互換性問題

**4. 外部環境リスク**
- 規制変更・コンプライアンス要件
- 競合他社の動向変化
- 市場環境の急激な変化

### 🛡️ 効果的な緩和策

**スケジュールリスク対策:**
- バッファ期間を20%確保（通常15%の1.3倍）
- クリティカルパスの特定と代替案準備
- 週次進捗レビューによる早期警告システム

**リソースリスク対策:**
- キーパーソンの知識共有とドキュメント化
- クロストレーニングによるスキル分散
- 外部パートナーとの事前契約

**技術リスク対策:**
- PoC（概念実証）による事前検証
- 段階的導入とロールバック計画
- 技術専門家との定期レビュー

### 📊 ベストプラクティス

**リスク評価マトリックス:**
- 発生確率（高・中・低）× 影響度（大・中・小）
- 月次リスクレビューでの状況更新
- アクションオーナーと期限の明確化

**早期警告指標:**
- 進捗率が計画より10%以上遅延
- 品質指標の基準値からの乖離
- チームメンバーの稼働率90%超

次に具体的なプロジェクトでのリスク分析をしましょうか？`,
        created_at: '2024-08-14T15:30:00Z',
        token_count: 195,
        model_id: 'gpt-4',
        cost: 0.009
      }
    ]
  },
  {
    id: 'thread-2',
    user_id: 'user-1', 
    task_id: '6ba7b810-9dad-11d1-80b4-00c04fd430c8',
    title: 'API認証バグ - 技術検討',
    created_at: '2024-08-13T14:00:00Z',
    updated_at: '2024-08-13T16:45:00Z',
    messages: [
      {
        id: 'msg-5',
        thread_id: 'thread-2',
        role: 'user',
        content: '本番環境でトークンのリフレッシュが正常に動作しない問題について調査しています。30分のアイドル後に401エラーが発生する原因と修正方法を教えてください。',
        created_at: '2024-08-13T14:00:00Z',
        token_count: 65
      },
      {
        id: 'msg-6',
        thread_id: 'thread-2',
        role: 'assistant',
        content: `## トークンリフレッシュ 401エラー 原因分析

### 🔍 考えられる原因

**1. サーバー側のセッション管理**
- セッションタイムアウト設定が30分
- メモリ上のセッション情報が予期せずクリア
- ロードバランサーでのセッション分散問題

**2. トークン検証ロジック**
- リフレッシュトークンの有効期限切れ
- トークン署名検証の失敗
- クロックスキューによる時刻ずれ

**3. ネットワーク・インフラ**
- CDN/プロキシでのヘッダー除去
- ファイアウォールによるトークン改ざん
- HTTPS設定の問題

### 🔧 修正手順

**即座に確認すべき項目:**
1. サーバーログでの401エラー詳細確認
2. リフレッシュトークンの実際の有効期限チェック
3. 開発環境での再現性テスト

**修正候補:**
- トークンの有効期限延長（60分に変更）
- 自動リフレッシュ機能の改善
- エラー時のフォールバック処理追加

ログファイルの確認はできますか？具体的なエラーメッセージを教えてください。`,
        created_at: '2024-08-13T14:05:00Z',
        token_count: 210,
        model_id: 'gpt-4',
        cost: 0.010
      },
      {
        id: 'msg-7',
        thread_id: 'thread-2',
        role: 'user', 
        content: 'ログを確認したところ、リフレッシュトークンの有効期限は60分に設定されているようですが、30分でエラーになっています。また、開発環境では問題なく動作しています。本番環境のみの問題のようです。',     
        created_at: '2024-08-13T16:40:00Z',
        token_count: 78
      },
      {
        id: 'msg-8',
        thread_id: 'thread-2',
        role: 'assistant',
        content: `## 本番環境特有の問題 - 解決策

### 🎯 高確率の原因: 環境差異
開発環境では正常で本番のみ30分で401エラーが発生する場合、**環境設定の差異**が主要因です。

### 🔍 本番環境での確認ポイント

**1. ロードバランサー設定**
- セッションアフィニティ（スティッキーセッション）無効
- 複数サーバー間でのトークン情報非共有
- ヘルスチェック間隔がトークン有効期限より短い

**2. 環境変数・設定ファイル**
- JWT_REFRESH_EXPIRY の実際の値確認
- データベース接続のタイムアウト設定
- Redisキャッシュの TTL 設定

**3. サーバー時刻同期**
- NTPサーバーとの時刻同期状況
- 複数サーバー間の時刻ずれ（数秒の差でも影響）

### ⚡ 緊急対応手順

**1. 即座実行（5分以内）:**
- 本番サーバーの時刻確認: date && ntpstat
- 環境変数確認: JWT_REFRESH_EXPIRY の値をチェック

**2. 暫定対応（30分以内）:**
- リフレッシュトークン有効期限を90分に延長
- 自動更新間隔を20分に短縮

**3. 根本解決（1日以内）:**
- セッションストレージをRedisに統一
- ロードバランサーの設定見直し

次に、本番環境の設定ファイルを確認できますか？`,
        created_at: '2024-08-13T16:45:00Z',
        token_count: 195,
        model_id: 'gpt-4',
        cost: 0.009
      }
    ]
  },
  {
    id: 'thread-3',
    user_id: 'user-1',
    task_id: 'task-002', 
    title: 'データベース最適化 - パフォーマンス改善',    
    created_at: '2024-08-12T10:30:00Z',
    updated_at: '2024-08-12T11:15:00Z',
    messages: [
      {
        id: 'msg-9',
        thread_id: 'thread-3',
        role: 'user',
        content: 'データベースのクエリパフォーマンスが低下しています。インデックス追加や正規化の見直しについて、どのような手順で進めるべきでしょうか？',         
        created_at: '2024-08-12T10:30:00Z',
        token_count: 41
      },
      {
        id: 'msg-10',
        thread_id: 'thread-3',
        role: 'assistant', 
        content: `## データベース最適化 実行計画

### 📊 パフォーマンス調査手順

#### 1. 現状分析
- **スロークエリログ確認**: 1秒以上のクエリ特定
- **EXPLAIN ANALYZE**: 実行計画と実際のコスト測定
- **テーブルサイズ調査**: 大きなテーブルの特定
- **インデックス使用状況**: 未使用インデックスの洗い出し

#### 2. パフォーマンス指標
- **レスポンス時間**: 目標500ms以下
- **CPU使用率**: ピーク時70%以下維持
- **メモリ使用量**: バッファプール効率化
- **ディスクI/O**: 読み込み回数削減

#### 3. 最適化施策

**インデックス最適化:**
- 複合インデックスの検討
- カーディナリティの低いカラムの見直し
- パーシャルインデックスの活用

**クエリ改善:**
- N+1問題の解決
- 不要なJOINの除去
- サブクエリの最適化

**正規化見直し:**
- 読み取り頻度の高いテーブルの非正規化検討
- マスタテーブルの分離
- 履歴テーブルのパーティショニング

### ⚙️ 実行スケジュール
1. **Phase 1 (1週間)**: スロークエリ特定・分析
2. **Phase 2 (1週間)**: インデックス追加・テスト
3. **Phase 3 (1週間)**: クエリ最適化・検証
4. **Phase 4 (3日)**: 本番反映・監視

現在のデータベースのサイズや主要なテーブル構成を教えていただけますか？`,
        created_at: '2024-08-12T11:15:00Z',
        token_count: 240,
        model_id: 'gpt-4',
        cost: 0.011
      }
    ]
  }
];

// タスクIDから関連するチャットスレッドを取得
export const getChatThreadsByTaskId = (taskId: string): ChatThread[] => {
  return mockChatThreads.filter(thread => thread.task_id === taskId);
};

// スレッドIDからチャットスレッドを取得
export const getChatThreadById = (threadId: string): ChatThread | undefined => {
  return mockChatThreads.find(thread => thread.id === threadId);
};